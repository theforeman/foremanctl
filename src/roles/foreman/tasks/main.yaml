---
- name: Pull the Foreman container image
  containers.podman.podman_image:
    name: "{{ foreman_container_image }}:{{ foreman_container_tag }}"
    state: present

- name: Create secret for DATABASE_URL
  containers.podman.podman_secret:
    state: present
    name: foreman-database-url
    data: "postgresql://{{ foreman_database_user }}:{{ foreman_database_password }}@{{ foreman_database_host }}:{{ foreman_database_port }}/{{ foreman_database_name }}?pool={{ foreman_database_pool }}&sslmode={{ foreman_database_sslmode }}{% if foreman_database_ssl_ca is defined %}&sslrootcert={{ foreman_database_ssl_ca }}{% endif %}" # yamllint disable-line rule:line-length
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create settings config secret
  containers.podman.podman_secret:
    state: present
    name: foreman-settings-yaml
    data: "{{ lookup('ansible.builtin.template', 'settings.yaml.j2') }}"
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create katello config secret
  containers.podman.podman_secret:
    state: present
    name: foreman-katello-yaml
    data: "{{ lookup('ansible.builtin.template', 'katello.yaml.j2') }}"
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create dynflow hosts_queue worker config secret
  containers.podman.podman_secret:
    state: present
    name: foreman-dynflow-worker-hosts-queue-yaml
    data: "{{ lookup('ansible.builtin.template', 'dynflow-worker-hosts-queue.yml') }}"
  notify:
    - Restart dynflow-sidekiq@

- name: Create the podman secret for Foreman CA certificate
  containers.podman.podman_secret:
    name: foreman-ca-cert
    path: "{{ foreman_ca_certificate }}"
    state: present
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create the podman secret for Foreman client certificate
  containers.podman.podman_secret:
    state: present
    name: foreman-client-cert
    path: "{{ foreman_client_certificate }}"
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create the podman secret for Foreman client key
  containers.podman.podman_secret:
    state: present
    name: foreman-client-key
    path: "{{ foreman_client_key }}"
  notify:
    - Restart foreman
    - Restart dynflow-sidekiq@

- name: Create directory for Foreman public assets
  ansible.builtin.file:
    path: "{{ foreman_public_assets_dir }}"
    state: directory
    mode: "0755"

- name: Create temporary container for asset extraction
  containers.podman.podman_container:
    name: foreman-extract-temp
    image: "{{ foreman_container_image }}:{{ foreman_container_tag }}"
    state: present

- name: Extract public assets using podman cp
  ansible.builtin.command:
    cmd: podman cp foreman-extract-temp:/usr/share/foreman/public/. {{ foreman_public_assets_dir }}/
  changed_when: false

- name: Remove temporary container
  containers.podman.podman_container:
    name: foreman-extract-temp
    state: absent

- name: Deploy Foreman Container
  containers.podman.podman_container:
    name: "foreman"
    image: "{{ foreman_container_image }}:{{ foreman_container_tag }}"
    state: quadlet
    sdnotify: true
    network: host
    hostname: "{{ ansible_fqdn }}"
    volume:
      - 'foreman-data-run:/var/run/foreman:z'
    secrets:
      - 'foreman-database-url,type=env,target=DATABASE_URL'
      - 'foreman-settings-yaml,type=mount,target=/etc/foreman/settings.yaml'
      - 'foreman-katello-yaml,type=mount,target=/etc/foreman/plugins/katello.yaml'
      - 'foreman-ca-cert,type=mount,target=/etc/foreman/katello-default-ca.crt'
      - 'foreman-client-cert,type=mount,target=/etc/foreman/client_cert.pem'
      - 'foreman-client-key,type=mount,target=/etc/foreman/client_key.pem'
    env:
      SEED_ADMIN_USER: "{{ foreman_initial_admin_username }}"
      SEED_ADMIN_PASSWORD: "{{ foreman_initial_admin_password }}"
    quadlet_options:
      - |
        [Install]
        WantedBy=default.target

- name: Deploy Dynflow Container
  containers.podman.podman_container:
    name: "dynflow-sidekiq-%i"
    quadlet_filename: "dynflow-sidekiq@"
    image: "{{ foreman_container_image }}:{{ foreman_container_tag }}"
    state: quadlet
    sdnotify: true
    network: host
    hostname: "{{ ansible_fqdn }}"
    volume:
      - 'foreman-data-run:/var/run/foreman:z'
    secrets:
      - 'foreman-database-url,type=env,target=DATABASE_URL'
      - 'foreman-settings-yaml,type=mount,target=/etc/foreman/settings.yaml'
      - 'foreman-katello-yaml,type=mount,target=/etc/foreman/plugins/katello.yaml'
      - 'foreman-ca-cert,type=mount,target=/etc/foreman/katello-default-ca.crt'
      - 'foreman-client-cert,type=mount,target=/etc/foreman/client_cert.pem'
      - 'foreman-client-key,type=mount,target=/etc/foreman/client_key.pem'
      - 'foreman-dynflow-worker-hosts-queue-yaml,type=mount,target=/etc/foreman/dynflow/worker-hosts-queue.yml'
    env:
      DYNFLOW_SIDEKIQ_SCRIPT: "/usr/share/foreman/extras/dynflow-sidekiq.rb"
      DYNFLOW_REDIS_URL: "redis://localhost:6379/6"
      REDIS_PROVIDER: "DYNFLOW_REDIS_URL"
    command: "/usr/libexec/foreman/sidekiq-selinux -e production -r /usr/share/foreman/extras/dynflow-sidekiq.rb -C /etc/foreman/dynflow/%i.yml"
    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
      - |
        [Service]
        RestartPolicy="on-failure"
        Restart=1

- name: Create Dynflow Container instances
  ansible.builtin.file:
    state: link
    src: "/etc/containers/systemd/dynflow-sidekiq@.container"
    dest: "/etc/containers/systemd/dynflow-sidekiq@{{ item }}.container"
  loop:
    - orchestrator
    - worker
    - worker-hosts-queue

- name: Run daemon reload to make Quadlet create the service files
  ansible.builtin.systemd:
    daemon_reload: true

- name: Migrate and seed the Foreman database
  containers.podman.podman_container:
    name: foreman-db-migrate
    image: "{{ foreman_container_image }}:{{ foreman_container_tag }}"
    command:
      - bash
      - -c
      - bin/rails db:migrate && bin/rails db:seed
    detach: false
    working_dir: /usr/share/foreman
    network: host
    secrets:
      - 'foreman-database-url,type=env,target=DATABASE_URL'
      - 'foreman-settings-yaml,type=mount,target=/etc/foreman/settings.yaml'
    env:
      SEED_ADMIN_USER: "{{ foreman_initial_admin_username }}"
      SEED_ADMIN_PASSWORD: "{{ foreman_initial_admin_password }}"

- name: Flush handlers to restart services
  ansible.builtin.meta: flush_handlers

- name: Start services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  async: 60
  poll: 0
  loop:
    - dynflow-sidekiq@orchestrator
    - dynflow-sidekiq@worker
    - dynflow-sidekiq@worker-hosts-queue
    - foreman

- name: Wait for Foreman service to be accessible
  ansible.builtin.uri:
    url: '{{ foreman_url }}/api/v2/ping'
    validate_certs: false
  until: foreman_status.status == 200
  retries: 60
  delay: 5
  register: foreman_status

- name: Wait for Foreman tasks to be ready
  ansible.builtin.uri:
    url: '{{ foreman_url }}/api/v2/ping'
    validate_certs: false
  until:
    - foreman_tasks_status.status == 200
    - foreman_tasks_status.json['results']['katello']['services']['foreman_tasks']['status'] == 'ok'
  retries: 60
  delay: 5
  register: foreman_tasks_status
  when:
    - "'katello' in foreman_status.json['results']"

- name: Configure Foreman Proxy
  theforeman.foreman.smart_proxy:
    name: "{{ ansible_fqdn }}-pulp"
    url: "https://{{ ansible_fqdn }}/pulp/api/v3/smart_proxy"
    server_url: "{{ foreman_url }}"
    username: "{{ foreman_initial_admin_username }}"
    password: "{{ foreman_initial_admin_password }}"
    validate_certs: false
